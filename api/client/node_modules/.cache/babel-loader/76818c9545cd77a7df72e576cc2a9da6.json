{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Mike\\\\Documents\\\\GitHub\\\\streams\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Mike\\\\Documents\\\\GitHub\\\\streams\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Mike\\\\Documents\\\\GitHub\\\\streams\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Mike\\\\Documents\\\\GitHub\\\\streams\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Mike\\\\Documents\\\\GitHub\\\\streams\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Mike\\\\Documents\\\\GitHub\\\\streams\\\\client\\\\src\\\\components\\\\streams\\\\StreamCreate.js\";\nimport React from 'react';\nimport { Field, reduxForm } from 'redux-form';\nimport { EINPROGRESS } from 'constants';\n\nvar StreamCreate =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(StreamCreate, _React$Component);\n\n  function StreamCreate() {\n    _classCallCheck(this, StreamCreate);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(StreamCreate).apply(this, arguments));\n  }\n\n  _createClass(StreamCreate, [{\n    key: \"renderInput\",\n    value: function renderInput(_ref) {\n      var input = _ref.input,\n          label = _ref.label;\n      return React.createElement(\"div\", {\n        className: \"field\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 9\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 10\n        },\n        __self: this\n      }, label, \" \"), React.createElement(\"input\", Object.assign({}, input, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 11\n        },\n        __self: this\n      })));\n    }\n  }, {\n    key: \"onSubmit\",\n    value: function onSubmit(formValues) {\n      // Stops the client from refreshing the page\n      console.log(formValues);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"form\", {\n        onSubmit: this.props.handleSubmit(this.onSubmit),\n        className: \"ui form\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }, React.createElement(Field, {\n        name: \"title\",\n        component: this.renderInput,\n        label: \"Enter Title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }), React.createElement(Field, {\n        name: \"description\",\n        component: this.renderInput,\n        label: \"Enter Description\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"ui button primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }, \"Submit\"));\n    }\n  }]);\n\n  return StreamCreate;\n}(React.Component);\n\nvar validate = function validate(formValues) {\n  var errors = {};\n\n  if (!formValues.title) {\n    // only if user didn't enter title\n    errors.title = 'You must enter a title';\n  }\n\n  if (!formValues.description) {\n    errors.description = 'You must enter a description.'; // user entered title\n  }\n\n  return errors;\n};\n\nexport default reduxForm({\n  form: 'streamCreate',\n  validate: validate\n})(StreamCreate);","map":{"version":3,"sources":["C:\\Users\\Mike\\Documents\\GitHub\\streams\\client\\src\\components\\streams\\StreamCreate.js"],"names":["React","Field","reduxForm","EINPROGRESS","StreamCreate","input","label","formValues","console","log","props","handleSubmit","onSubmit","renderInput","Component","validate","errors","title","description","form"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,SAAhB,QAAiC,YAAjC;AACA,SAASC,WAAT,QAA4B,WAA5B;;IAEMC,Y;;;;;;;;;;;;;sCAE4B;AAAA,UAAhBC,KAAgB,QAAhBA,KAAgB;AAAA,UAATC,KAAS,QAATA,KAAS;AAC1B,aACI;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAQA,KAAR,MADJ,EAEI,+CAAWD,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAFJ,CADJ;AAMH;;;6BAEQE,U,EAAY;AACjB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,UAAZ;AACH;;;6BAEQ;AACL,aACI;AAAM,QAAA,QAAQ,EAAE,KAAKG,KAAL,CAAWC,YAAX,CAAwB,KAAKC,QAA7B,CAAhB;AAAwD,QAAA,SAAS,EAAC,SAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAC,OAAZ;AAAoB,QAAA,SAAS,EAAE,KAAKC,WAApC;AAAiD,QAAA,KAAK,EAAC,aAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAEI,oBAAC,KAAD;AACI,QAAA,IAAI,EAAC,aADT;AAEI,QAAA,SAAS,EAAE,KAAKA,WAFpB;AAGI,QAAA,KAAK,EAAC,mBAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,EAMI;AAAQ,QAAA,SAAS,EAAC,mBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBANJ,CADJ;AAUH;;;;EA3BsBb,KAAK,CAACc,S;;AA8BjC,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAAR,UAAU,EAAI;AAC3B,MAAMS,MAAM,GAAG,EAAf;;AAEA,MAAI,CAACT,UAAU,CAACU,KAAhB,EAAuB;AACnB;AACAD,IAAAA,MAAM,CAACC,KAAP,GAAe,wBAAf;AACH;;AACD,MAAI,CAACV,UAAU,CAACW,WAAhB,EAA6B;AACzBF,IAAAA,MAAM,CAACE,WAAP,GAAqB,+BAArB,CADyB,CAEzB;AACH;;AAED,SAAOF,MAAP;AACH,CAbD;;AAeA,eAAed,SAAS,CAAC;AACrBiB,EAAAA,IAAI,EAAE,cADe;AAErBJ,EAAAA,QAAQ,EAARA;AAFqB,CAAD,CAAT,CAGZX,YAHY,CAAf","sourcesContent":["import React from 'react';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { EINPROGRESS } from 'constants';\r\n\r\nclass StreamCreate extends React.Component {\r\n\r\n    renderInput({ input, label }) {\r\n        return (\r\n            <div className=\"field\">\r\n                <label>{label} </label>\r\n                <input {...input} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    onSubmit(formValues) {\r\n        // Stops the client from refreshing the page\r\n        console.log(formValues);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.props.handleSubmit(this.onSubmit)} className=\"ui form\">\r\n                <Field name=\"title\" component={this.renderInput} label=\"Enter Title\" />\r\n                <Field\r\n                    name=\"description\"\r\n                    component={this.renderInput}\r\n                    label=\"Enter Description\" />\r\n                <button className=\"ui button primary\">Submit</button>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nconst validate = formValues => {\r\n    const errors = {};\r\n\r\n    if (!formValues.title) {\r\n        // only if user didn't enter title\r\n        errors.title = 'You must enter a title';\r\n    }\r\n    if (!formValues.description) {\r\n        errors.description = 'You must enter a description.';\r\n        // user entered title\r\n    }\r\n\r\n    return errors;\r\n};\r\n\r\nexport default reduxForm({\r\n    form: 'streamCreate',\r\n    validate\r\n})(StreamCreate);"]},"metadata":{},"sourceType":"module"}