{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Mike\\\\Documents\\\\GitHub\\\\Streams\\\\test02\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Mike\\\\Documents\\\\GitHub\\\\Streams\\\\test02\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Mike\\\\Documents\\\\GitHub\\\\Streams\\\\test02\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Mike\\\\Documents\\\\GitHub\\\\Streams\\\\test02\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Mike\\\\Documents\\\\GitHub\\\\Streams\\\\test02\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Mike\\\\Documents\\\\GitHub\\\\Streams\\\\test02\\\\client\\\\src\\\\components\\\\streams\\\\StreamShow.js\";\nimport React from 'react';\nimport flv from 'flv.js';\nimport { connect } from 'react-redux';\nimport { fetchStream } from '../../actions';\n\nvar StreamShow =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(StreamShow, _React$Component);\n\n  function StreamShow(props) {\n    var _this;\n\n    _classCallCheck(this, StreamShow);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(StreamShow).call(this, props));\n    _this.videoRef = React.createRef();\n    return _this;\n  }\n\n  _createClass(StreamShow, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var id = this.props.match.params.id;\n      this.props.fetchStream(id);\n      this.buildPlayer();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.buildPlayer();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      console.log('I was unmouned');\n    }\n  }, {\n    key: \"buildPlayer\",\n    value: function buildPlayer() {\n      if (this.player || !this.props.stream) {\n        return;\n      }\n\n      var id = this.props.match.params.id;\n      this.player = flv.createPlayer({\n        type: 'flv',\n        url: \"http://localhost:8000/live/\".concat(id, \".flv\")\n      });\n      this.player.attachMediaElement(this.videoRef.current);\n      this.player.load();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (!this.props.stream) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45\n          },\n          __self: this\n        }, \"Loading...\");\n      }\n\n      var _this$props$stream = this.props.stream,\n          title = _this$props$stream.title,\n          description = _this$props$stream.description;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, React.createElement(\"video\", {\n        ref: this.videoRef,\n        style: {\n          width: '100%'\n        },\n        controls: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }), React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, title), React.createElement(\"h5\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, description));\n    }\n  }]);\n\n  return StreamShow;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state, ownProps) {\n  return {\n    stream: state.streams[ownProps.match.params.id]\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchStream: fetchStream\n})(StreamShow);","map":{"version":3,"sources":["C:\\Users\\Mike\\Documents\\GitHub\\Streams\\test02\\client\\src\\components\\streams\\StreamShow.js"],"names":["React","flv","connect","fetchStream","StreamShow","props","videoRef","createRef","id","match","params","buildPlayer","console","log","player","stream","createPlayer","type","url","attachMediaElement","current","load","title","description","width","Component","mapStateToProps","state","ownProps","streams"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,QAAhB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,WAAT,QAA4B,eAA5B;;IAEMC,U;;;;;AACF,sBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,oFAAMA,KAAN;AAEA,UAAKC,QAAL,GAAgBN,KAAK,CAACO,SAAN,EAAhB;AAHe;AAIlB;;;;wCAEmB;AAAA,UACRC,EADQ,GACD,KAAKH,KAAL,CAAWI,KAAX,CAAiBC,MADhB,CACRF,EADQ;AAGhB,WAAKH,KAAL,CAAWF,WAAX,CAAuBK,EAAvB;AACA,WAAKG,WAAL;AACH;;;yCAEoB;AACjB,WAAKA,WAAL;AACH;;;2CAGD;AACIC,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACH;;;kCAEa;AACV,UAAI,KAAKC,MAAL,IAAe,CAAC,KAAKT,KAAL,CAAWU,MAA/B,EAAuC;AACnC;AACH;;AAHS,UAKFP,EALE,GAKK,KAAKH,KAAL,CAAWI,KAAX,CAAiBC,MALtB,CAKFF,EALE;AAMV,WAAKM,MAAL,GAAcb,GAAG,CAACe,YAAJ,CAAiB;AAC3BC,QAAAA,IAAI,EAAE,KADqB;AAE3BC,QAAAA,GAAG,uCAAgCV,EAAhC;AAFwB,OAAjB,CAAd;AAIA,WAAKM,MAAL,CAAYK,kBAAZ,CAA+B,KAAKb,QAAL,CAAcc,OAA7C;AACA,WAAKN,MAAL,CAAYO,IAAZ;AACH;;;6BAEQ;AACL,UAAI,CAAC,KAAKhB,KAAL,CAAWU,MAAhB,EAAwB;AACpB,eAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAP;AACH;;AAHI,+BAK0B,KAAKV,KAAL,CAAWU,MALrC;AAAA,UAKGO,KALH,sBAKGA,KALH;AAAA,UAKUC,WALV,sBAKUA,WALV;AAOL,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAO,QAAA,GAAG,EAAE,KAAKjB,QAAjB;AAA2B,QAAA,KAAK,EAAE;AAAEkB,UAAAA,KAAK,EAAE;AAAT,SAAlC;AAAqD,QAAA,QAAQ,EAAE,IAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKF,KAAL,CAFJ,EAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKC,WAAL,CAHJ,CADJ;AAOH;;;;EAnDoBvB,KAAK,CAACyB,S;;AAsD/B,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAQC,QAAR,EAAqB;AACzC,SAAO;AAAEb,IAAAA,MAAM,EAAEY,KAAK,CAACE,OAAN,CAAcD,QAAQ,CAACnB,KAAT,CAAeC,MAAf,CAAsBF,EAApC;AAAV,GAAP;AACH,CAFD;;AAKA,eAAeN,OAAO,CAACwB,eAAD,EAAkB;AAAEvB,EAAAA,WAAW,EAAXA;AAAF,CAAlB,CAAP,CAA0CC,UAA1C,CAAf","sourcesContent":["import React from 'react';\r\nimport flv from 'flv.js';\r\nimport { connect } from 'react-redux';\r\nimport { fetchStream } from '../../actions';\r\n\r\nclass StreamShow extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.videoRef = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { id } = this.props.match.params;\r\n\r\n        this.props.fetchStream(id);\r\n        this.buildPlayer();\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.buildPlayer();\r\n    }\r\n\r\n    componentWillUnmount()\r\n    {\r\n        console.log('I was unmouned');\r\n    }\r\n\r\n    buildPlayer() {\r\n        if (this.player || !this.props.stream) {\r\n            return;\r\n        }\r\n\r\n        const { id } = this.props.match.params;\r\n        this.player = flv.createPlayer({\r\n            type: 'flv',\r\n            url: `http://localhost:8000/live/${id}.flv`\r\n        });\r\n        this.player.attachMediaElement(this.videoRef.current);\r\n        this.player.load();\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.stream) {\r\n            return <div>Loading...</div>;\r\n        }\r\n\r\n        const { title, description } = this.props.stream;\r\n\r\n        return (\r\n            <div>\r\n                <video ref={this.videoRef} style={{ width: '100%' }} controls={true} />\r\n                <h1>{title}</h1>\r\n                <h5>{description}</h5>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return { stream: state.streams[ownProps.match.params.id] }\r\n};\r\n\r\n\r\nexport default connect(mapStateToProps, { fetchStream })(StreamShow);"]},"metadata":{},"sourceType":"module"}